"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var asnResponse_model_1 = __importDefault(require("./model/asnResponse.model"));
var lruCache_1 = __importDefault(require("./cache/lruCache"));
var en_US_json_1 = __importDefault(require("../config/en_US.json"));
var ipinfo_model_1 = __importDefault(require("./model/ipinfo.model"));
var IPinfoWrapper = (function () {
    function IPinfoWrapper(token) {
        this.limitErrorMessage = "You have exceeded 1,000 requests a day. Visit https://ipinfo.io/account to see your API limits.";
        this.token = token;
        this.countries = en_US_json_1.default;
        this.cache = new lruCache_1.default();
    }
    IPinfoWrapper.prototype.lookupIp = function (ip) {
        var _this = this;
        if (!ip || typeof ip !== "string") {
            throw new Error("ip is a required parameter");
        }
        var data = this.cache.getIp(ip);
        if (!data) {
            var url = "" + ipinfo_model_1.default.Fqdn + ip;
            var config_1 = {
                headers: {
                    Accept: "application/json",
                    Authorization: "Bearer " + this.token,
                    "Content-Type": "application/json",
                    "User-Agent": "IPinfoClient/nodejs/1.0",
                },
                method: "get",
                url: "" + url,
            };
            return new Promise(function (resolve, reject) {
                axios_1.default(config_1)
                    .then(function (response) {
                    var ipinfo = new ipinfo_model_1.default(response.data, _this.countries);
                    _this.cache.setIp(ip, ipinfo);
                    resolve(ipinfo);
                })
                    .catch(function (error) {
                    if (error.response && error.response.status === 429) {
                        throw new Error(_this.limitErrorMessage);
                    }
                    reject(error);
                });
            });
        }
        return new Promise(function (resolve) {
            resolve(data);
        });
    };
    IPinfoWrapper.prototype.lookupASN = function (asn) {
        var _this = this;
        if (!asn || typeof asn !== "string") {
            throw new Error("asn is a required parameter");
        }
        var data = this.cache.getAsn(asn);
        if (!data) {
            var url = "" + ipinfo_model_1.default.Fqdn + asn + "/json";
            var config_2 = {
                headers: {
                    Accept: "application/json",
                    Authorization: "Bearer " + this.token,
                    "Content-Type": "application/json",
                    "User-Agent": "IPinfoClient/nodejs/1.0",
                },
                method: "get",
                url: "" + url,
            };
            return new Promise(function (resolve, reject) {
                axios_1.default(config_2)
                    .then(function (response) {
                    var asnResponse = new asnResponse_model_1.default(response.data, _this.countries);
                    _this.cache.setAsn(asn, asnResponse);
                    resolve(asnResponse);
                })
                    .catch(function (error) {
                    if (error.response && error.response.status === 429) {
                        reject(Error(_this.limitErrorMessage));
                    }
                    reject(error);
                });
            });
        }
        return new Promise(function (resolve) {
            resolve(data);
        });
    };
    return IPinfoWrapper;
}());
exports.default = IPinfoWrapper;
